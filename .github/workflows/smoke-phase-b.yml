name: smoke-phase-b

on:
  workflow_dispatch: {}
  pull_request:
    paths:
      - "services/leadgen-service/**"
      - "services/gateway/**"
      - "services/auth-service/**"
      - "backend/**"
      - "backend/docker-compose.yml"
      - "infra/**"
      - ".github/workflows/smoke-phase-b.yml"

permissions:
  contents: read

concurrency:
  group: smoke-phase-b-${{ github.ref }}
  cancel-in-progress: false

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GATEWAY_URL: http://localhost:4000
      AUTH_URL: http://localhost:4001
      LEADGEN_HEALTH: http://localhost:4000/api/leadgen/health
      QR_CREATE: http://localhost:4000/api/leadgen/v1/qrcodes
      QR_LIST: http://localhost:4000/api/leadgen/v1/qrcodes

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Show Docker & Compose versions
        run: |
          set -x
          docker --version
          docker compose version

      - name: Show repo tree (top 2 levels)
        run: |
          ls -la
          find . -maxdepth 2 -type d -print

      - name: Validate compose file (prints effective config)
        run: |
          set -euxo pipefail
          docker compose -f backend/docker-compose.yml config

      - name: Compose up (build + start, plain logs)
        run: |
          set -euxo pipefail
          docker compose -f backend/docker-compose.yml up -d --build
          docker compose -f backend/docker-compose.yml ps

      - name: Inspect containers (ps + last 200 lines per service)
        run: |
          set -euxo pipefail
          docker compose -f backend/docker-compose.yml ps -a
          echo "---- AUTH LOGS ----";     docker compose -f backend/docker-compose.yml logs --no-color --tail=200 auth     || true
          echo "---- GATEWAY LOGS ----";  docker compose -f backend/docker-compose.yml logs --no-color --tail=200 gateway  || true
          echo "---- LEADGEN LOGS ----";  docker compose -f backend/docker-compose.yml logs --no-color --tail=200 leadgen  || true
          echo "---- MONOLITH LOGS ----"; docker compose -f backend/docker-compose.yml logs --no-color --tail=200 monolith || true

      - name: Wait for services (auth jwks & gateway tcp)
        shell: bash
        run: |
          set -euxo pipefail
          retry() { n=0; until [ $n -ge 60 ]; do "$@" && break; n=$((n+1)); echo "retry $n"; sleep 2; done; test $n -lt 60; }
          # wait for TCP ports
          retry bash -lc "echo > /dev/tcp/127.0.0.1/4001"
          retry bash -lc "echo > /dev/tcp/127.0.0.1/4000"
          # wait for JWKS to be real JSON
          retry bash -lc "curl -sf $AUTH_URL/.well-known/jwks.json | jq -e '.keys|length > 0'"

      - name: Password login -> token (try admin then admin123)
        id: login
        shell: bash
        run: |
          set -euxo pipefail
          try_login() {
            PW="$1"
            TOK=$(curl -s -X POST $AUTH_URL/v1/auth/login \
              -H 'Content-Type: application/json' \
              -d "{\"email\":\"admin@example.com\",\"password\":\"$PW\"}" | jq -r '.token // empty')
            echo "$TOK"
          }
          TOK=$(try_login admin)
          if [ -z "$TOK" ]; then TOK=$(try_login admin123); fi
          if [ -z "$TOK" ]; then echo "Login failed with both admin and admin123"; exit 1; fi
          echo "$TOK" > token.txt
          echo "token=$TOK" >> $GITHUB_OUTPUT

      - name: Check token claim shape (iss,aud,sub,tid,roles,email,exp)
        run: |
          set -euxo pipefail
          TOK=$(cat token.txt)
          B64=$(echo "$TOK" | cut -d. -f2)
          # Convert base64url -> base64 and pad to length multiple of 4
          B64_STD=$(echo "$B64" | tr '-_' '+/')
          PAD=$(( (4 - ${#B64_STD} % 4) % 4 ))
          printf -v PADSTR '%*s' "$PAD" ''
          PADSTR=${PADSTR// /=}
          PAYLOAD=$(printf '%s%s' "$B64_STD" "$PADSTR" | base64 -d)
          echo "$PAYLOAD" | jq .
          KEYS=$(echo "$PAYLOAD" | jq -c 'keys|sort')
          EXPECT='["aud","email","exp","iss","roles","sub","tid"]'
          [ "$KEYS" = "$EXPECT" ] || (echo "Claim shape mismatch -> $KEYS"; exit 1)

      - name: LeadGen health via gateway
        run: |
          set -euxo pipefail
          curl -sf -H "Authorization: Bearer $(cat token.txt)" "$LEADGEN_HEALTH" | jq -e '.ok == true and .service == "leadgen"'

      - name: Create QR
        run: |
          set -euxo pipefail
          curl -sf -X POST "$QR_CREATE" \
            -H "Authorization: Bearer $(cat token.txt)" \
            -H 'Content-Type: application/json' \
            -d '{"code":"DEMO-CI-QR","status":"active"}' | tee create.json
          jq -e '.success == true' create.json >/dev/null

      - name: List QRs and assert presence
        run: |
          set -euxo pipefail
          curl -sf -H "Authorization: Bearer $(cat token.txt)" "$QR_LIST" | tee list.json
          jq -e '.data | map(select(.code=="DEMO-CI-QR")) | length >= 1' list.json >/dev/null

      - name: Dump compose logs on failure
        if: failure()
        run: |
          docker compose -f backend/docker-compose.yml ps
          docker compose -f backend/docker-compose.yml logs --no-color > compose-logs.txt || true

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: |
            compose-logs.txt
            create.json
            list.json
          if-no-files-found: ignore

      - name: Compose down
        if: always()
        run: docker compose -f backend/docker-compose.yml down -v
